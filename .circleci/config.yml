version: 2.1
orbs:
  docker: circleci/docker@2.2.0

jobs:
  configure-cluster:
    docker:
      - image: 'circleci/python:3.7'
    steps:
      - checkout
      - run:
          name: setup enviroment 
          command: |
            # Install kubectl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin
            kubectl version --short --client

            # Install AWS CLI
            curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version

            # Install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: Create EKS cluster
          command: |
            # # Create the EKS cluster
            # eksctl create cluster -f eks-cluster/cluster.yaml
            # kubectl get nodes
            # aws s3 cp ~/.kube/config s3://vietudacity/kubeconfig
            #  # Set the name of the cluster
            CLUSTER_NAME="udacity-cluster"
            
            # Check if the cluster already exists
            if aws eks describe-cluster --name "$CLUSTER_NAME" >/dev/null 2>&1; then
              echo "The EKS cluster '$CLUSTER_NAME' already exists."
            else
              # Create the EKS cluster
              eksctl create cluster -f eks-cluster/cluster.yaml
              kubectl get nodes
              aws s3 cp ~/.kube/config s3://vietudacity/kubeconfig            
            fi
  test-build:
    docker:
      - image: 'circleci/python:3.7'
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'v1-dependencies-{{ checksum "requirements.txt" }}'
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - save_cache:
          paths:
            - ./venv
          key: 'v1-dependencies-{{ checksum "requirements.txt" }}'

  build_docker:
    docker:
      - image: 'circleci/python:3.7'
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            sudo apt-get update
            sudo apt-get install -y curl
            
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - run:
          name: Build, tag, and push the image to Amazon ECR
          command: |
            # build a docker image
            echo "Build a docker container"
            docker build -t vietcapstone:latest .
          
            # tag the docker image
            REPOSITORY_URI="399684875495.dkr.ecr.us-east-1.amazonaws.com/vietcapstone:latest"
            docker tag vietcapstone:latest $REPOSITORY_URI

            echo "Pushing image to ECR"
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 399684875495.dkr.ecr.us-east-1.amazonaws.com
            docker push $REPOSITORY_URI
  
  deploy:
    docker:
      - image: 'circleci/python:3.7'
    steps:
      - checkout
      - run:
          name: Install environment
          command: |
            # Install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # Install kubectl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin
            
            sudo apt-get update
            sudo apt-get install -y curl

      - run:
          name: Get config
          command: |
            aws s3 cp s3://vietudacity/kubeconfig ~/.kube/config
            export KUBECONFIG=$KUBECONFIG:~/.kube/config
      - run:
          name: Deploy Docker Image to EKS Cluster
          command: |
            # create namespace
            # kubectl create namespace viet-capstone

            # kubectl config
            kubectl config set-context --current --namespace=viet-capstone
            kubectl apply -f deployment.yml -n viet-capstone

            # get Load Balancer url
            LOADBALAMCER_URL=$(kubectl get services -n viet-capstone loadbalancer -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "$LOADBALAMCER_URL" > url.txt
            echo "$LOADBALAMCER_URL"
            cat url.txt

            # copy the output to s3
            aws s3 url.txt s3://vietudacity/url.txt

            # deploy 
            kubectl get deployments -n viet-capstone

            # update-run the latest Build
            kubectl -n viet-capstone set image deployment/viet-deployment webserver=399684875495.dkr.ecr.us-east-1.amazonaws.com/vietcapstone:latest
            
            # monitoring deployment ist successful
            kubectl -n viet-capstone rollout status deployment viet-deployment

      - run:
          name: smock test
          command: |
            exit 0

workflows:
  default:
    jobs:
      - configure-cluster
      - test-build
      - build_docker:
          requires: [test-build, configure-cluster]
      - deploy:
          requires: [build_docker]